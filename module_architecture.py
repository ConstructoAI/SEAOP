#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Module Service d'Architecture pour SEAOP
Gestion des demandes de plans d'architecture pour projets > 6000 pi¬≤
"""

import streamlit as st
import sqlite3
import datetime
import uuid
import os
import base64
from typing import Dict, List, Optional

# Configuration du stockage persistant
DATA_DIR = os.getenv('DATA_DIR', '/opt/render/project/data')
if not os.path.exists(DATA_DIR):
    os.makedirs(DATA_DIR, exist_ok=True)

DATABASE_PATH = os.path.join(DATA_DIR, 'seaop.db')

# === FONCTIONS POUR SERVICE D'ARCHITECTURE ===

def creer_demande_architecture(demande_data: Dict) -> str:
    """Cr√©e une nouvelle demande de plans d'architecture"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    try:
        # G√©n√©rer un num√©ro de r√©f√©rence unique
        numero_reference = f"SEAOP-ARCH-{datetime.datetime.now().strftime('%Y%m%d')}-{uuid.uuid4().hex[:6].upper()}"
        
        # Calculer le prix estim√© bas√© sur la superficie
        superficie = float(demande_data.get('superficie_batiment', 0))
        if superficie < 10000:
            prix_base = 15000
            prix_par_pi2 = 1.50
        elif superficie < 25000:
            prix_base = 25000
            prix_par_pi2 = 1.25
        elif superficie < 50000:
            prix_base = 40000
            prix_par_pi2 = 1.00
        else:
            prix_base = 60000
            prix_par_pi2 = 0.85
        
        prix_estime = prix_base + (superficie * prix_par_pi2)
        
        # Services inclus
        services_inclus = []
        if demande_data.get('inclure_structure'):
            services_inclus.append('structure')
            prix_estime += superficie * 0.25
        if demande_data.get('inclure_mecanique'):
            services_inclus.append('mecanique')
            prix_estime += superficie * 0.20
        if demande_data.get('inclure_electrique'):
            services_inclus.append('electrique')
            prix_estime += superficie * 0.15
        if demande_data.get('inclure_civil'):
            services_inclus.append('civil')
            prix_estime += superficie * 0.10
        
        services_str = ','.join(services_inclus) if services_inclus else ''
        
        cursor.execute('''
            INSERT INTO demandes_architecture (
                nom_client, email_client, telephone_client, adresse_projet,
                ville, code_postal, type_batiment, usage_batiment,
                superficie_terrain, superficie_batiment, nombre_etages,
                nombre_logements, type_construction, style_architectural,
                contraintes_terrain, exigences_speciales, plans_requis,
                services_inclus, besoin_3d, besoin_permis,
                certificat_localisation, photos_terrain, croquis_client,
                budget_construction, budget_architecture, date_debut_souhaite,
                date_livraison_plans, niveau_urgence, prix_service,
                modalite_paiement, numero_reference
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            demande_data['nom_client'],
            demande_data['email_client'],
            demande_data['telephone_client'],
            demande_data['adresse_projet'],
            demande_data['ville'],
            demande_data['code_postal'],
            demande_data['type_batiment'],
            demande_data['usage_batiment'],
            demande_data.get('superficie_terrain'),
            demande_data['superficie_batiment'],
            demande_data.get('nombre_etages', 1),
            demande_data.get('nombre_logements'),
            demande_data['type_construction'],
            demande_data.get('style_architectural', ''),
            demande_data.get('contraintes_terrain', ''),
            demande_data.get('exigences_speciales', ''),
            demande_data['plans_requis'],
            services_str,
            1 if demande_data.get('besoin_3d') else 0,
            1 if demande_data.get('besoin_permis', True) else 0,
            demande_data.get('certificat_localisation', ''),
            demande_data.get('photos_terrain', ''),
            demande_data.get('croquis_client', ''),
            demande_data.get('budget_construction', ''),
            demande_data.get('budget_architecture', ''),
            str(demande_data.get('date_debut_souhaite', '')),
            str(demande_data.get('date_livraison_plans', '')),
            demande_data.get('niveau_urgence', 'normal'),
            prix_estime,
            demande_data.get('modalite_paiement', 'forfait'),
            numero_reference
        ))
        
        demande_id = cursor.lastrowid
        
        # Cr√©er une notification admin
        cursor.execute('''
            INSERT INTO notifications (
                utilisateur_type, utilisateur_id, type_notification,
                titre, message, lien_id
            ) VALUES (?, ?, ?, ?, ?, ?)
        ''', (
            'admin', 0, 'nouvelle_demande_architecture',
            'üèõÔ∏è Nouvelle demande d\'architecture',
            f'{demande_data["nom_client"]} - {demande_data["type_batiment"]} de {superficie:,.0f} pi¬≤',
            demande_id
        ))
        
        conn.commit()
        return numero_reference
        
    except Exception as e:
        print(f"Erreur lors de la cr√©ation de la demande d'architecture: {e}")
        conn.rollback()
        return None
    finally:
        conn.close()

def get_demandes_architecture_admin() -> List[Dict]:
    """R√©cup√®re toutes les demandes d'architecture pour l'admin"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT id, nom_client, email_client, telephone_client, type_batiment,
               usage_batiment, superficie_batiment, nombre_etages, ville,
               budget_construction, prix_service, statut, date_demande,
               numero_reference, niveau_urgence, date_livraison_plans,
               certificat_localisation, photos_terrain, croquis_client,
               plans_preliminaires, plans_finaux, pourcentage_complete
        FROM demandes_architecture
        ORDER BY 
            CASE niveau_urgence 
                WHEN 'critique' THEN 1 
                WHEN 'eleve' THEN 2 
                WHEN 'normal' THEN 3 
                WHEN 'faible' THEN 4 
            END,
            date_demande DESC
    ''')
    
    demandes = []
    for row in cursor.fetchall():
        demandes.append({
            'id': row[0],
            'nom_client': row[1],
            'email_client': row[2],
            'telephone_client': row[3],
            'type_batiment': row[4],
            'usage_batiment': row[5],
            'superficie_batiment': row[6],
            'nombre_etages': row[7],
            'ville': row[8],
            'budget_construction': row[9],
            'prix_service': row[10],
            'statut': row[11],
            'date_demande': row[12],
            'numero_reference': row[13],
            'niveau_urgence': row[14],
            'date_livraison_plans': row[15],
            'certificat_localisation': row[16],
            'photos_terrain': row[17],
            'croquis_client': row[18],
            'plans_preliminaires': row[19],
            'plans_finaux': row[20],
            'pourcentage_complete': row[21]
        })
    
    conn.close()
    return demandes

def get_demandes_architecture_client(email_client: str) -> List[Dict]:
    """R√©cup√®re les demandes d'architecture d'un client"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT id, type_batiment, usage_batiment, superficie_batiment,
               ville, prix_service, statut, date_demande, numero_reference,
               date_livraison_plans, pourcentage_complete, plans_finaux
        FROM demandes_architecture
        WHERE email_client = ?
        ORDER BY date_demande DESC
    ''', (email_client,))
    
    demandes = []
    for row in cursor.fetchall():
        demandes.append({
            'id': row[0],
            'type_batiment': row[1],
            'usage_batiment': row[2],
            'superficie_batiment': row[3],
            'ville': row[4],
            'prix_service': row[5],
            'statut': row[6],
            'date_demande': row[7],
            'numero_reference': row[8],
            'date_livraison_plans': row[9],
            'pourcentage_complete': row[10],
            'plans_finaux': row[11]
        })
    
    conn.close()
    return demandes

def get_demande_architecture_by_id(demande_id: int) -> Optional[Dict]:
    """R√©cup√®re une demande d'architecture par son ID"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT * FROM demandes_architecture WHERE id = ?
    ''', (demande_id,))
    
    row = cursor.fetchone()
    if not row:
        conn.close()
        return None
    
    # Mapper toutes les colonnes
    columns = [description[0] for description in cursor.description]
    demande = dict(zip(columns, row))
    
    conn.close()
    return demande

def mettre_a_jour_statut_architecture(demande_id: int, nouveau_statut: str, notes: str = None, pourcentage: int = None) -> bool:
    """Met √† jour le statut d'une demande d'architecture"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    try:
        updates = ['statut = ?']
        params = [nouveau_statut]
        
        # Ajouter les dates selon le statut
        if nouveau_statut == 'en_analyse':
            updates.append('date_analyse = ?')
            params.append(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
        elif nouveau_statut == 'acceptee':
            updates.append('date_acceptation = ?')
            params.append(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
        elif nouveau_statut == 'en_cours':
            updates.append('date_debut_plans = ?')
            params.append(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
        elif nouveau_statut == 'revision':
            updates.append('date_revision = ?')
            params.append(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
        elif nouveau_statut == 'approuvee':
            updates.append('date_approbation = ?')
            params.append(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
        elif nouveau_statut == 'livree':
            updates.append('date_livraison = ?')
            params.append(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
        
        if notes:
            updates.append('notes_internes = ?')
            params.append(notes)
        
        if pourcentage is not None:
            updates.append('pourcentage_complete = ?')
            params.append(pourcentage)
        
        params.append(demande_id)
        
        cursor.execute(f'''
            UPDATE demandes_architecture 
            SET {', '.join(updates)}
            WHERE id = ?
        ''', params)
        
        conn.commit()
        return True
        
    except Exception as e:
        print(f"Erreur lors de la mise √† jour du statut: {e}")
        conn.rollback()
        return False
    finally:
        conn.close()

def ajouter_plans_architecture(demande_id: int, plans_preliminaires: str = None, plans_finaux: str = None, devis: str = None) -> bool:
    """Ajoute les plans d'architecture √† une demande"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    try:
        updates = []
        params = []
        
        if plans_preliminaires:
            updates.append('plans_preliminaires = ?')
            params.append(plans_preliminaires)
        
        if plans_finaux:
            updates.append('plans_finaux = ?')
            params.append(plans_finaux)
        
        if devis:
            updates.append('devis_architecture = ?')
            params.append(devis)
        
        if updates:
            params.append(demande_id)
            
            cursor.execute(f'''
                UPDATE demandes_architecture 
                SET {', '.join(updates)}
                WHERE id = ?
            ''', params)
        
        conn.commit()
        return True
        
    except Exception as e:
        print(f"Erreur lors de l'ajout des plans: {e}")
        conn.rollback()
        return False
    finally:
        conn.close()

def encoder_fichiers_architecture(fichiers_uploades: list) -> str:
    """Encode une liste de fichiers en base64 pour stockage"""
    if not fichiers_uploades:
        return ""
    
    fichiers_encodes = []
    
    for fichier in fichiers_uploades:
        try:
            contenu = fichier.read()
            contenu_b64 = base64.b64encode(contenu).decode('utf-8')
            fichiers_encodes.append(f"{fichier.name}:{contenu_b64}")
        except Exception as e:
            print(f"Erreur lors de l'encodage de {fichier.name}: {e}")
    
    return ','.join(fichiers_encodes)

def get_stats_architecture() -> Dict:
    """R√©cup√®re les statistiques du service d'architecture"""
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    # Stats g√©n√©rales
    cursor.execute('''
        SELECT 
            COUNT(*) as total,
            COUNT(CASE WHEN statut = 'recue' THEN 1 END) as recues,
            COUNT(CASE WHEN statut IN ('en_analyse', 'acceptee', 'en_cours', 'revision') THEN 1 END) as en_cours,
            COUNT(CASE WHEN statut IN ('livree', 'terminee') THEN 1 END) as terminees,
            SUM(CASE WHEN statut IN ('livree', 'terminee') THEN prix_service ELSE 0 END) as ca_total,
            AVG(superficie_batiment) as superficie_moyenne,
            AVG(CASE WHEN statut IN ('livree', 'terminee') THEN prix_service END) as prix_moyen
        FROM demandes_architecture
    ''')
    
    stats = cursor.fetchone()
    
    # Distribution par type de b√¢timent
    cursor.execute('''
        SELECT type_batiment, COUNT(*) as nombre
        FROM demandes_architecture
        GROUP BY type_batiment
    ''')
    
    types_batiments = cursor.fetchall()
    
    conn.close()
    
    return {
        'total': stats[0] if stats[0] else 0,
        'recues': stats[1] if stats[1] else 0,
        'en_cours': stats[2] if stats[2] else 0,
        'terminees': stats[3] if stats[3] else 0,
        'ca_total': stats[4] if stats[4] else 0,
        'superficie_moyenne': stats[5] if stats[5] else 0,
        'prix_moyen': stats[6] if stats[6] else 0,
        'types_batiments': types_batiments
    }

# === INTERFACE STREAMLIT POUR SERVICE D'ARCHITECTURE ===

def page_service_architecture():
    """Page du service d'architecture pour projets > 6000 pi¬≤"""
    
    st.markdown("## üèõÔ∏è Service d'Architecture Professionnelle")
    st.markdown("### Plans d'architecte pour projets de grande envergure (> 6,000 pi¬≤)")
    
    # Onglets pour client et consultation
    tab1, tab2, tab3 = st.tabs(["üìê Nouvelle demande", "üìã Mes demandes", "‚ÑπÔ∏è Informations"])
    
    with tab1:
        st.markdown("""
        #### Obtenez des plans d'architecte professionnels
        
        **Service complet incluant :**
        - Plans d'architecture scell√©s par architecte OAQ
        - Conformit√© au Code National du B√¢timent
        - Aide pour permis de construction
        - Mod√©lisation 3D (optionnel)
        - Coordination avec ing√©nieurs (structure, m√©canique, √©lectrique)
        """)
        
        # V√©rification de la superficie
        st.warning("""
        ‚ö†Ô∏è **Important** : Ce service est **obligatoire** pour les projets de plus de 6,000 pi¬≤ 
        selon la r√©glementation qu√©b√©coise. Un architecte membre de l'OAQ doit signer les plans.
        """)
        
        with st.form("formulaire_architecture"):
            # Section 1: Informations client
            st.markdown("### 1Ô∏è‚É£ Vos informations")
            col1, col2 = st.columns(2)
            
            with col1:
                nom_client = st.text_input("Nom complet ou entreprise *", placeholder="Corporation ABC Inc.")
                telephone = st.text_input("T√©l√©phone *", placeholder="514-555-1234")
                ville = st.text_input("Ville du projet *", placeholder="Montr√©al")
            
            with col2:
                email = st.text_input("Email *", placeholder="contact@entreprise.com")
                adresse_projet = st.text_input("Adresse du projet *", placeholder="1234 Rue Principale")
                code_postal = st.text_input("Code postal *", placeholder="H1A 1A1")
            
            # Section 2: D√©tails du projet
            st.markdown("### 2Ô∏è‚É£ D√©tails du projet architectural")
            
            col1, col2 = st.columns(2)
            
            with col1:
                type_batiment = st.selectbox(
                    "Type de b√¢timent *",
                    ["", "r√©sidentiel", "commercial", "industriel", "institutionnel", "mixte"]
                )
                
                superficie_batiment = st.number_input(
                    "Superficie totale du b√¢timent (pi¬≤) *",
                    min_value=6000,
                    value=6000,
                    step=100,
                    help="Minimum 6,000 pi¬≤ pour ce service"
                )
                
                nombre_etages = st.number_input(
                    "Nombre d'√©tages",
                    min_value=1,
                    max_value=50,
                    value=1
                )
                
                if type_batiment == "r√©sidentiel":
                    nombre_logements = st.number_input(
                        "Nombre de logements",
                        min_value=1,
                        value=1
                    )
                else:
                    nombre_logements = None
            
            with col2:
                type_construction = st.selectbox(
                    "Type de construction *",
                    ["", "nouvelle", "agrandissement", "renovation_majeure"]
                )
                
                superficie_terrain = st.number_input(
                    "Superficie du terrain (pi¬≤)",
                    min_value=0,
                    value=0,
                    step=100,
                    help="Laissez 0 si non applicable"
                )
                
                style_architectural = st.selectbox(
                    "Style architectural souhait√©",
                    ["", "moderne", "contemporain", "traditionnel", "industriel", "minimaliste", "autre"]
                )
            
            usage_batiment = st.text_area(
                "Usage pr√©vu du b√¢timent *",
                placeholder="Ex: Immeuble de 24 condos avec stationnement souterrain et espaces commerciaux au RDC",
                height=100
            )
            
            # Section 3: Sp√©cifications techniques
            st.markdown("### 3Ô∏è‚É£ Sp√©cifications et contraintes")
            
            contraintes_terrain = st.text_area(
                "Contraintes du terrain",
                placeholder="Ex: Terrain en pente, servitudes, zone inondable, proximit√© d'un cours d'eau...",
                height=80
            )
            
            exigences_speciales = st.text_area(
                "Exigences sp√©ciales",
                placeholder="Ex: Certification LEED, accessibilit√© universelle, insonorisation sup√©rieure...",
                height=80
            )
            
            # Section 4: Services requis
            st.markdown("### 4Ô∏è‚É£ Services requis")
            
            col1, col2 = st.columns(2)
            
            with col1:
                plans_requis = st.selectbox(
                    "Type de plans requis *",
                    ["", "preliminaire", "concept", "execution", "complet"],
                    help="Pr√©liminaire: esquisse, Concept: 30%, Ex√©cution: 100%, Complet: tous les plans"
                )
                
                besoin_3d = st.checkbox("Mod√©lisation 3D requise", value=False)
                besoin_permis = st.checkbox("Aide pour permis de construction", value=True)
            
            with col2:
                st.markdown("**Services d'ing√©nierie additionnels:**")
                inclure_structure = st.checkbox("Structure", help="+0.25$/pi¬≤")
                inclure_mecanique = st.checkbox("M√©canique (CVAC, plomberie)", help="+0.20$/pi¬≤")
                inclure_electrique = st.checkbox("√âlectrique", help="+0.15$/pi¬≤")
                inclure_civil = st.checkbox("Civil (drainage, √©gouts)", help="+0.10$/pi¬≤")
            
            # Section 5: Budget et d√©lais
            st.markdown("### 5Ô∏è‚É£ Budget et √©ch√©ancier")
            
            col1, col2 = st.columns(2)
            
            with col1:
                budget_construction = st.selectbox(
                    "Budget de construction estim√©",
                    ["", "Moins de 1M$", "1M$ - 5M$", "5M$ - 10M$", 
                     "10M$ - 25M$", "25M$ - 50M$", "Plus de 50M$"]
                )
                
                date_debut_souhaite = st.date_input(
                    "Date de d√©but de construction souhait√©e",
                    min_value=datetime.date.today() + datetime.timedelta(days=60),
                    value=datetime.date.today() + datetime.timedelta(days=120)
                )
            
            with col2:
                budget_architecture = st.selectbox(
                    "Budget pour services d'architecture",
                    ["", "√Ä d√©terminer", "50k$ - 100k$", "100k$ - 250k$", 
                     "250k$ - 500k$", "500k$ - 1M$", "Plus de 1M$"]
                )
                
                date_livraison_plans = st.date_input(
                    "Date de livraison des plans souhait√©e",
                    min_value=datetime.date.today() + datetime.timedelta(days=30),
                    value=datetime.date.today() + datetime.timedelta(days=60)
                )
            
            niveau_urgence = st.selectbox(
                "Niveau d'urgence",
                ["normal", "faible", "eleve", "critique"],
                format_func=lambda x: {
                    'faible': 'üü¢ Faible - D√©lai flexible',
                    'normal': 'üü° Normal - D√©lai standard',
                    'eleve': 'üü† √âlev√© - Prioritaire',
                    'critique': 'üî¥ Critique - Tr√®s urgent'
                }[x]
            )
            
            # Section 6: Documents
            st.markdown("### 6Ô∏è‚É£ Documents √† fournir")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                certificat = st.file_uploader(
                    "Certificat de localisation",
                    type=['pdf', 'jpg', 'png'],
                    help="Document du terrain existant"
                )
            
            with col2:
                photos = st.file_uploader(
                    "Photos du terrain/b√¢timent",
                    type=['jpg', 'png', 'jpeg'],
                    accept_multiple_files=True,
                    help="Photos actuelles du site"
                )
            
            with col3:
                croquis = st.file_uploader(
                    "Croquis ou esquisses",
                    type=['pdf', 'jpg', 'png', 'dwg'],
                    accept_multiple_files=True,
                    help="Vos id√©es pr√©liminaires"
                )
            
            # Estimation du prix
            st.markdown("### üí∞ Estimation du co√ªt")
            
            if superficie_batiment > 0:
                # Calcul estim√©
                if superficie_batiment < 10000:
                    prix_base = 15000
                    prix_pi2 = 1.50
                elif superficie_batiment < 25000:
                    prix_base = 25000
                    prix_pi2 = 1.25
                elif superficie_batiment < 50000:
                    prix_base = 40000
                    prix_pi2 = 1.00
                else:
                    prix_base = 60000
                    prix_pi2 = 0.85
                
                prix_estime = prix_base + (superficie_batiment * prix_pi2)
                
                # Ajouts pour services
                if inclure_structure:
                    prix_estime += superficie_batiment * 0.25
                if inclure_mecanique:
                    prix_estime += superficie_batiment * 0.20
                if inclure_electrique:
                    prix_estime += superficie_batiment * 0.15
                if inclure_civil:
                    prix_estime += superficie_batiment * 0.10
                
                st.info(f"""
                **Estimation pr√©liminaire : {prix_estime:,.2f}$**
                
                Cette estimation inclut:
                - Plans d'architecture de base : {prix_base:,.2f}$
                - Superficie ({superficie_batiment:,.0f} pi¬≤ √ó {prix_pi2}$/pi¬≤) : {(superficie_batiment * prix_pi2):,.2f}$
                {f"- Services de structure : {(superficie_batiment * 0.25):,.2f}$" if inclure_structure else ""}
                {f"- Services m√©caniques : {(superficie_batiment * 0.20):,.2f}$" if inclure_mecanique else ""}
                {f"- Services √©lectriques : {(superficie_batiment * 0.15):,.2f}$" if inclure_electrique else ""}
                {f"- Services civils : {(superficie_batiment * 0.10):,.2f}$" if inclure_civil else ""}
                
                *Prix final sujet √† analyse d√©taill√©e du projet*
                """)
            
            # Bouton de soumission
            submitted = st.form_submit_button("üì§ Soumettre la demande", type="primary")
            
            if submitted:
                # Validation
                if not all([nom_client, email, telephone, adresse_projet, ville, code_postal,
                           type_batiment, type_construction, usage_batiment, plans_requis]):
                    st.error("‚ùå Veuillez remplir tous les champs obligatoires (*)")
                elif superficie_batiment < 6000:
                    st.error("‚ùå La superficie doit √™tre d'au moins 6,000 pi¬≤")
                else:
                    # Pr√©parer les donn√©es
                    demande_data = {
                        'nom_client': nom_client,
                        'email_client': email,
                        'telephone_client': telephone,
                        'adresse_projet': adresse_projet,
                        'ville': ville,
                        'code_postal': code_postal,
                        'type_batiment': type_batiment,
                        'usage_batiment': usage_batiment,
                        'superficie_terrain': superficie_terrain if superficie_terrain > 0 else None,
                        'superficie_batiment': superficie_batiment,
                        'nombre_etages': nombre_etages,
                        'nombre_logements': nombre_logements,
                        'type_construction': type_construction,
                        'style_architectural': style_architectural,
                        'contraintes_terrain': contraintes_terrain,
                        'exigences_speciales': exigences_speciales,
                        'plans_requis': plans_requis,
                        'inclure_structure': inclure_structure,
                        'inclure_mecanique': inclure_mecanique,
                        'inclure_electrique': inclure_electrique,
                        'inclure_civil': inclure_civil,
                        'besoin_3d': besoin_3d,
                        'besoin_permis': besoin_permis,
                        'budget_construction': budget_construction,
                        'budget_architecture': budget_architecture,
                        'date_debut_souhaite': date_debut_souhaite,
                        'date_livraison_plans': date_livraison_plans,
                        'niveau_urgence': niveau_urgence,
                        'modalite_paiement': 'forfait'
                    }
                    
                    # Encoder les fichiers
                    if certificat:
                        demande_data['certificat_localisation'] = encoder_fichiers_architecture([certificat])
                    if photos:
                        demande_data['photos_terrain'] = encoder_fichiers_architecture(photos)
                    if croquis:
                        demande_data['croquis_client'] = encoder_fichiers_architecture(croquis)
                    
                    # Cr√©er la demande
                    numero_ref = creer_demande_architecture(demande_data)
                    
                    if numero_ref:
                        st.success(f"""
                        ‚úÖ **Demande cr√©√©e avec succ√®s!**
                        
                        **Num√©ro de r√©f√©rence : {numero_ref}**
                        
                        Vous recevrez une r√©ponse dans les 48 heures ouvrables.
                        
                        **Prochaines √©tapes:**
                        1. Analyse de votre demande par notre √©quipe
                        2. Contact d'un architecte OAQ pour validation
                        3. Proposition d√©taill√©e avec √©ch√©ancier
                        4. D√©but des plans apr√®s acceptation
                        """)
                        
                        st.balloons()
                    else:
                        st.error("‚ùå Erreur lors de la cr√©ation de la demande. Veuillez r√©essayer.")
    
    with tab2:
        st.markdown("### üìã Suivi de vos demandes d'architecture")
        
        email_consultation = st.text_input(
            "Entrez votre email pour consulter vos demandes",
            placeholder="contact@entreprise.com"
        )
        
        if st.button("üîç Rechercher mes demandes"):
            if email_consultation:
                demandes = get_demandes_architecture_client(email_consultation)
                
                if demandes:
                    st.success(f"‚úÖ {len(demandes)} demande(s) trouv√©e(s)")
                    
                    for demande in demandes:
                        with st.expander(f"üìê {demande['numero_reference']} - {demande['type_batiment'].title()}"):
                            col1, col2, col3 = st.columns(3)
                            
                            with col1:
                                st.markdown(f"**Type:** {demande['type_batiment'].title()}")
                                st.markdown(f"**Superficie:** {demande['superficie_batiment']:,.0f} pi¬≤")
                                st.markdown(f"**Ville:** {demande['ville']}")
                            
                            with col2:
                                statut_emoji = {
                                    'recue': 'üì®', 'en_analyse': 'üîç', 'acceptee': '‚úÖ',
                                    'en_cours': 'üìê', 'revision': 'üìù', 'approuvee': 'üëç',
                                    'livree': 'üì¶', 'terminee': '‚úîÔ∏è'
                                }.get(demande['statut'], 'üìã')
                                
                                st.markdown(f"**Statut:** {statut_emoji} {demande['statut'].replace('_', ' ').title()}")
                                st.markdown(f"**Prix:** {demande['prix_service']:,.2f}$")
                                if demande['pourcentage_complete']:
                                    st.progress(demande['pourcentage_complete'] / 100)
                                    st.caption(f"Progression: {demande['pourcentage_complete']}%")
                            
                            with col3:
                                st.markdown(f"**Date demande:** {demande['date_demande'][:10] if demande['date_demande'] else 'N/A'}")
                                st.markdown(f"**Livraison pr√©vue:** {demande['date_livraison_plans'] if demande['date_livraison_plans'] else '√Ä d√©terminer'}")
                            
                            st.markdown("---")
                            st.markdown(f"**Usage:** {demande['usage_batiment']}")
                            
                            # T√©l√©chargement des plans si disponibles
                            if demande['plans_finaux']:
                                st.markdown("### üì• Documents disponibles")
                                st.download_button(
                                    "‚¨áÔ∏è T√©l√©charger les plans finaux",
                                    data=demande['plans_finaux'],
                                    file_name=f"Plans_{demande['numero_reference']}.pdf",
                                    mime="application/pdf"
                                )
                else:
                    st.info("‚ùå Aucune demande trouv√©e pour cet email")
            else:
                st.warning("‚ö†Ô∏è Veuillez entrer votre email")
    
    with tab3:
        st.markdown("""
        ### ‚ÑπÔ∏è Informations sur le service d'architecture
        
        #### üìè Quand un architecte est-il obligatoire au Qu√©bec?
        
        Selon la Loi sur les architectes du Qu√©bec, un architecte membre de l'OAQ est **obligatoire** pour:
        
        - **B√¢timents publics** : Toute superficie
        - **√âdifices √† bureaux** : Plus de 300 m¬≤ (3,230 pi¬≤) par √©tage
        - **Commerces** : Plus de 300 m¬≤ (3,230 pi¬≤) par √©tage
        - **Industries** : Plus de 300 m¬≤ (3,230 pi¬≤) par √©tage
        - **Habitations** : 5 logements et plus OU plus de 600 m¬≤ (6,460 pi¬≤) total
        
        #### üí∞ Structure de prix typique
        
        | Superficie | Prix de base | Prix/pi¬≤ | Services inclus |
        |------------|--------------|----------|-----------------|
        | 6,000 - 10,000 pi¬≤ | 15,000$ | 1.50$ | Plans de base |
        | 10,000 - 25,000 pi¬≤ | 25,000$ | 1.25$ | Plans d√©taill√©s |
        | 25,000 - 50,000 pi¬≤ | 40,000$ | 1.00$ | Coordination compl√®te |
        | 50,000 pi¬≤ et + | 60,000$ | 0.85$ | Gestion de projet |
        
        **Services additionnels:**
        - Structure : +0.25$/pi¬≤
        - M√©canique : +0.20$/pi¬≤
        - √âlectrique : +0.15$/pi¬≤
        - Civil : +0.10$/pi¬≤
        
        #### üìã Documents livrables
        
        **Plans pr√©liminaires (30%):**
        - Plan d'implantation
        - Plans d'√©tage
        - √âl√©vations
        - Coupes principales
        
        **Plans d'ex√©cution (100%):**
        - Plans architecturaux complets
        - D√©tails de construction
        - Devis descriptif
        - Bordereau des finis
        - Plans pour permis
        
        #### ‚è±Ô∏è D√©lais typiques
        
        - **Analyse initiale** : 2-3 jours ouvrables
        - **Plans pr√©liminaires** : 2-3 semaines
        - **Plans d'ex√©cution** : 4-8 semaines
        - **R√©visions** : 1-2 semaines
        - **Approbation finale** : 3-5 jours
        
        #### üìû Support
        
        Pour toute question sur le service d'architecture:
        - üìß architecture@seaop.ca
        - üìû 1-800-SEAOP-QC
        - üí¨ Chat en direct disponible
        """)
        
        # Statistiques du service
        st.markdown("---")
        st.markdown("### üìä Statistiques du service")
        
        stats = get_stats_architecture()
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Projets totaux", stats['total'])
        
        with col2:
            st.metric("En cours", stats['en_cours'])
        
        with col3:
            st.metric("Superficie moyenne", f"{stats['superficie_moyenne']:,.0f} pi¬≤" if stats['superficie_moyenne'] else "N/A")
        
        with col4:
            st.metric("Prix moyen", f"{stats['prix_moyen']:,.2f}$" if stats['prix_moyen'] else "N/A")